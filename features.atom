<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title>V8 JavaScript and WebAssembly language features</title><subtitle>JavaScript V8 引擎</subtitle><link href="https://v8.js.cn/features.atom" rel="self"/><link href="https://v8.js.cn/features"/><updated>2021-10-27T00:00:00Z</updated><id>https://v8.js.cn/features</id><author><name>Mathias Bynens</name></author><entry><title>Finding elements in `Array`s and TypedArrays</title><link href="https://v8.js.cn/features/finding-in-arrays"/><updated>2021-10-27T00:00:00Z</updated><id>https://v8.js.cn/features/finding-in-arrays</id><author><name>Shu-yu Guo (@_shu)</name></author><content type="html">&lt;h2 id=&quot;finding-elements-from-the-beginning&quot;&gt;Finding elements from the beginning &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/finding-in-arrays#finding-elements-from-the-beginning&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Finding an element that satisfies some condition in an &lt;code&gt;Array&lt;/code&gt; is a common task and is done with the &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;findIndex&lt;/code&gt; methods on &lt;code&gt;Array.prototype&lt;/code&gt; and the various TypedArray prototypes. &lt;code&gt;Array.prototype.find&lt;/code&gt; takes a predicate and returns the first element in the array for which that predicate returns &lt;code&gt;true&lt;/code&gt;. If the predicate doesn&#39;t return &lt;code&gt;true&lt;/code&gt; for any element, the method returns &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; inputArray &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;inputArray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;v &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → {v:2}&lt;/span&gt;&lt;br /&gt;inputArray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;v &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → undefined&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Array.prototype.findIndex&lt;/code&gt; works similarly, except it returns the index when found, and &lt;code&gt;-1&lt;/code&gt; when not found. The TypedArray versions of &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;findIndex&lt;/code&gt; work exactly the same, with the only difference being that they operate on TypedArray instances instead of Array instances.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;inputArray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findIndex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;v &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → 1&lt;/span&gt;&lt;br /&gt;inputArray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findIndex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;v &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → -1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;finding-elements-from-the-end&quot;&gt;Finding elements from the end &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/finding-in-arrays#finding-elements-from-the-end&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What if you want to find the last element in the &lt;code&gt;Array&lt;/code&gt;? This use case often naturally arises, such as choosing to deduplicate multiple matches in favor of the last element, or knowing ahead of time that the element is likely to be near the end of the &lt;code&gt;Array&lt;/code&gt;. With the &lt;code&gt;find&lt;/code&gt; method, one solution is to first reverse the input, like so:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;inputArray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;predicate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, that reverses the original &lt;code&gt;inputArray&lt;/code&gt; in-place, which is sometimes undesirable.&lt;/p&gt;
&lt;p&gt;With the &lt;code&gt;findLast&lt;/code&gt; and &lt;code&gt;findLastIndex&lt;/code&gt; methods, this use case can be solved directly and ergonomically. They behave exactly as their &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;findIndex&lt;/code&gt; counterparts, except they start their search from the end of the &lt;code&gt;Array&lt;/code&gt; or TypedArray.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; inputArray &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;inputArray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findLast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;v &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → {v:4}&lt;/span&gt;&lt;br /&gt;inputArray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findLast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;v &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → undefined&lt;/span&gt;&lt;br /&gt;inputArray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findLastIndex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;v &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → 3&lt;/span&gt;&lt;br /&gt;inputArray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findLastIndex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;v &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → -1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;support&quot;&gt;&lt;code&gt;findLast&lt;/code&gt; and &lt;code&gt;findLastIndex&lt;/code&gt; support &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/finding-in-arrays#support&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul class=&quot;feature-support&quot;&gt; &lt;li class=&quot;environment has-support&quot;&gt; &lt;span class=&quot;icon chrome&quot;&gt;Chrome:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;97&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support has-link&quot;&gt; &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1704385&quot;&gt; &lt;span class=&quot;icon firefox&quot;&gt;Firefox:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;environment partial-support has-link&quot;&gt; &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=227939&quot;&gt; &lt;span class=&quot;icon safari&quot;&gt;Safari:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;部分支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon nodejs&quot;&gt;Node.js:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment has-support has-link&quot;&gt; &lt;a href=&quot;https://github.com/zloirock/core-js#array-find-from-last&quot;&gt; &lt;span class=&quot;icon babel&quot;&gt;Babel:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;&lt;div class=&quot;feature-support-info&quot;&gt;&lt;a href=&quot;https://v8.js.cn/features/support&quot;&gt;关于特性支持列表&lt;/a&gt;&lt;/div&gt;
</content></entry><entry><title>`at` method for relative indexing</title><link href="https://v8.js.cn/features/at-method"/><updated>2021-07-13T00:00:00Z</updated><id>https://v8.js.cn/features/at-method</id><author><name>Shu-yu Guo (@_shu)</name></author><content type="html">&lt;p&gt;The new &lt;code&gt;at&lt;/code&gt; method on &lt;code&gt;Array.prototype&lt;/code&gt;, the various TypedArray prototypes, and &lt;code&gt;String.prototype&lt;/code&gt; makes accessing an element nearer to the end of the collection easier and more succinct.&lt;/p&gt;
&lt;p&gt;Accessing the Nth element from the end of a collection is a common operation. However, the usual ways to do so are verbose, like &lt;code&gt;my_array[my_array.length - N]&lt;/code&gt;, or might not be performant, like &lt;code&gt;my_array.slice(-N)[0]&lt;/code&gt;. The new &lt;code&gt;at&lt;/code&gt; method makes this operation more ergonomic by interpreting negative indices to mean &amp;quot;from the end&amp;quot;. The previous examples may be expressed as &lt;code&gt;my_array.at(-N)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For uniformity, positive indices are also supported, and are equivalent to ordinary property access.&lt;/p&gt;
&lt;p&gt;This new method is small enough that its full semantics may be understood by this compliant polyfill implementation below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Convert the argument to an integer&lt;/span&gt;&lt;br /&gt;  n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Allow negative indexing from the end&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Out-of-bounds access returns undefined&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Otherwise, this is just normal property access&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;a-word-about-strings&quot;&gt;A word about Strings &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/at-method#a-word-about-strings&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since &lt;code&gt;at&lt;/code&gt; ultimately performs ordinary indexing, calling &lt;code&gt;at&lt;/code&gt; on String values returns code units, just as ordinary indexing would. And like ordinary indexing on Strings, code units may not be what you want for Unicode strings! Please consider if &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt&quot;&gt;&lt;code&gt;String.prototype.codePointAt()&lt;/code&gt;&lt;/a&gt; is more appropriate for your use case.&lt;/p&gt;
&lt;h2 id=&quot;support&quot;&gt;&lt;code&gt;at&lt;/code&gt; method support &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/at-method#support&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul class=&quot;feature-support&quot;&gt; &lt;li class=&quot;environment has-support&quot;&gt; &lt;span class=&quot;icon chrome&quot;&gt;Chrome:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;92&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment has-support&quot;&gt; &lt;span class=&quot;icon firefox&quot;&gt;Firefox:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;90&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon safari&quot;&gt;Safari:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon nodejs&quot;&gt;Node.js:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment has-support has-link&quot;&gt; &lt;a href=&quot;https://github.com/zloirock/core-js#relative-indexing-method&quot;&gt; &lt;span class=&quot;icon babel&quot;&gt;Babel:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;&lt;div class=&quot;feature-support-info&quot;&gt;&lt;a href=&quot;https://v8.js.cn/features/support&quot;&gt;关于特性支持列表&lt;/a&gt;&lt;/div&gt;
</content></entry><entry><title>Error causes</title><link href="https://v8.js.cn/features/error-cause"/><updated>2021-07-07T00:00:00Z</updated><id>https://v8.js.cn/features/error-cause</id><author><name>Victor Gomes (@VictorBFG)</name></author><content type="html">&lt;p&gt;Imagine you have a function that is calling two separate work loads &lt;code&gt;doSomeWork&lt;/code&gt; and &lt;code&gt;doMoreWork&lt;/code&gt;. Both functions can throw the same kind of errors, but you need to handle them in different ways.&lt;/p&gt;
&lt;p&gt;Catching the error and throwing it with additional contextual information is a common approach to this problem, for example:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doWork&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;doSomeWork&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CustomError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Some work failed&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;doMoreWork&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;doWork&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Is |err| coming from |doSomeWork| or |doMoreWork|?&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately the above solution is laborious, since one needs to create its own &lt;code&gt;CustomError&lt;/code&gt;. And, even worse, no developer tool is capable of providing helpful diagnosing messages to unexpected exceptions, since there is no consensus on how to properly represent these errors.&lt;/p&gt;
&lt;p&gt;What has been missing so far is a standard way to chain errors. JavaScript now supports error causes. An additional options parameter can be added to the &lt;code&gt;Error&lt;/code&gt; constructor with a &lt;code&gt;cause&lt;/code&gt; property, the value of which will be assigned to the error instances. Errors can then easily be chained.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doWork&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;doSomeWork&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Some work failed&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;cause&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; err &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;doMoreWork&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;More work failed&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;cause&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; err &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;doWork&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Some work failed&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function&quot;&gt;handleSomeWorkFailure&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cause&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;More work failed&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function&quot;&gt;handleMoreWorkFailure&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cause&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This feature is available in V8 v9.3.&lt;/p&gt;
&lt;h2 id=&quot;support&quot;&gt;Error causes support &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/error-cause#support&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul class=&quot;feature-support&quot;&gt; &lt;li class=&quot;environment has-support has-link&quot;&gt; &lt;a href=&quot;https://chromium-review.googlesource.com/c/v8/v8/+/2784681&quot;&gt; &lt;span class=&quot;icon chrome&quot;&gt;Chrome:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;93&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;environment has-support has-link&quot;&gt; &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1679653&quot;&gt; &lt;span class=&quot;icon firefox&quot;&gt;Firefox:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;91&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;environment has-support has-link&quot;&gt; &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=223302&quot;&gt; &lt;span class=&quot;icon safari&quot;&gt;Safari:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;15&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon nodejs&quot;&gt;Node.js:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon babel&quot;&gt;Babel:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;/ul&gt;&lt;div class=&quot;feature-support-info&quot;&gt;&lt;a href=&quot;https://v8.js.cn/features/support&quot;&gt;关于特性支持列表&lt;/a&gt;&lt;/div&gt;
</content></entry><entry><title>`Object.hasOwn`</title><link href="https://v8.js.cn/features/object-has-own"/><updated>2021-07-01T00:00:00Z</updated><id>https://v8.js.cn/features/object-has-own</id><author><name>Victor Gomes (@VictorBFG)</name></author><content type="html">&lt;p&gt;Today, it is very common to write code like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; hasOwnProperty &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;hasOwnProperty&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;object&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// `object` has property `foo`.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or to use libraries that expose a simple version of &lt;code&gt;Object.prototype.hasOwnProperty&lt;/code&gt;, such as &lt;a href=&quot;https://www.npmjs.com/package/has&quot;&gt;has&lt;/a&gt; or &lt;a href=&quot;https://www.npmjs.com/package/lodash.has&quot;&gt;lodash.has&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With the &lt;a href=&quot;https://github.com/tc39/proposal-accessible-object-hasownproperty&quot;&gt;&lt;code&gt;Object.hasOwn&lt;/code&gt; proposal&lt;/a&gt;, we can simply write:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hasOwn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;object&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// `object` has property `foo`.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Object.hasOwn&lt;/code&gt; is already available in V8 v9.3 behind the &lt;code&gt;--harmony-object-has-own&lt;/code&gt; flag, and we’ll be rolling it out in Chrome soon.&lt;/p&gt;
&lt;h2 id=&quot;support&quot;&gt;&lt;code&gt;Object.hasOwn&lt;/code&gt; support &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/object-has-own#support&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul class=&quot;feature-support&quot;&gt; &lt;li class=&quot;environment has-support has-link&quot;&gt; &lt;a href=&quot;https://chromium-review.googlesource.com/c/v8/v8/+/2922117&quot;&gt; &lt;span class=&quot;icon chrome&quot;&gt;Chrome:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;environment has-support has-link&quot;&gt; &lt;a href=&quot;https://hg.mozilla.org/try/rev/94515f78324e83d4fd84f4b0ab764b34aabe6d80&quot;&gt; &lt;span class=&quot;icon firefox&quot;&gt;Firefox:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;environment has-support has-link&quot;&gt; &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=226291&quot;&gt; &lt;span class=&quot;icon safari&quot;&gt;Safari:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon nodejs&quot;&gt;Node.js:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment has-support has-link&quot;&gt; &lt;a href=&quot;https://github.com/zloirock/core-js#accessible-objectprototypehasownproperty&quot;&gt; &lt;span class=&quot;icon babel&quot;&gt;Babel:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;&lt;div class=&quot;feature-support-info&quot;&gt;&lt;a href=&quot;https://v8.js.cn/features/support&quot;&gt;关于特性支持列表&lt;/a&gt;&lt;/div&gt;
</content></entry><entry><title>Import assertions</title><link href="https://v8.js.cn/features/import-assertions"/><updated>2021-06-15T00:00:00Z</updated><id>https://v8.js.cn/features/import-assertions</id><author><name>Dan Clark (@dandclark1), assertive importer of import assertions</name></author><content type="html">&lt;p&gt;The new &lt;a href=&quot;https://github.com/tc39/proposal-import-assertions&quot;&gt;import assertions&lt;/a&gt; feature allows module import statements to include additional information alongside the module specifier. An initial use for the feature is to enable JSON documents to be imported as &lt;a href=&quot;https://github.com/tc39/proposal-json-modules&quot;&gt;JSON modules&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// foo.json&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;answer&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// main.mjs&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; json &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./foo.json&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;json&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;json&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;answer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 42&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;background%3A-json-modules-and-mime-type&quot;&gt;Background: JSON modules and MIME type &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/import-assertions#background%3A-json-modules-and-mime-type&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A natural question to ask is why a JSON module couldn’t simply be imported like this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; json &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./foo.json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The web platform checks the MIME type of a module resource for validity prior to executing it, and in theory this MIME type could also be used to determine whether to treat the resource as a JSON or as a JavaScript module.&lt;/p&gt;
&lt;p&gt;But, there’s a &lt;a href=&quot;https://github.com/w3c/webcomponents/issues/839&quot;&gt;security issue&lt;/a&gt; with relying on the MIME type alone.&lt;/p&gt;
&lt;p&gt;Modules can be imported cross-origin, and a developer might import a JSON module from a third-party source. They might consider this to be basically safe even from an untrusted third-party as long as the JSON is properly sanitized, since importing JSON won’t execute script.&lt;/p&gt;
&lt;p&gt;However, third-party script can actually execute in this scenario because the third-party server could unexpectedly reply with a JavaScript MIME type and a malicious JavaScript payload, running code in the importer’s domain.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Executes JS if evil.com responds with a&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// JavaScript MIME type (e.g. `text/javascript`)!&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; data &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://evil.com/data.json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;File extensions can’t be used to make a module type determination because they &lt;a href=&quot;https://github.com/tc39/proposal-import-assertions/blob/master/content-type-vs-file-extension.md&quot;&gt;aren’t a reliable indicator of content type on the web&lt;/a&gt;. So instead, we use import assertions to indicate the expected module type and prevent this escalation-of-privilege pitfall.&lt;/p&gt;
&lt;p&gt;When a developer wants to import a JSON module, they must use an import assertion to specify that it’s supposed to be JSON. The import will fail if the MIME type received from the network doesn’t match the expected type:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Fails if evil.com responds with a non-JSON MIME type.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; data &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://evil.com/data.json&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;json&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;dynamic-import()&quot;&gt;Dynamic &lt;code&gt;import()&lt;/code&gt; &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/import-assertions#dynamic-import()&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Import assertions can also be passed to &lt;a href=&quot;https://v8.dev/features/dynamic-import#dynamic&quot;&gt;dynamic &lt;code&gt;import()&lt;/code&gt;&lt;/a&gt; with a new second parameter:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// foo.json&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;answer&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// main.mjs&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; jsonModule &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./foo.json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;json&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;jsonModule&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;default&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;answer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 42&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The JSON content is the default export of the module, so it’s referenced through the &lt;code&gt;default&lt;/code&gt; property on the object returned from &lt;code&gt;import()&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/import-assertions#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Currently the only specified use of import assertions is for specifying module type. However, the feature was designed to allow arbitrary key/value assertion pairs, so additional uses may be added in the future if it becomes useful to restrain module imports in other ways.&lt;/p&gt;
&lt;p&gt;Meanwhile, JSON modules with the new import assertions syntax are available by default in Chromium 91. &lt;a href=&quot;https://chromestatus.com/feature/5948572598009856&quot;&gt;CSS module scripts&lt;/a&gt; are also coming soon, using the same module-type-assertion syntax.&lt;/p&gt;
&lt;h2 id=&quot;support&quot;&gt;Import assertions support &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/import-assertions#support&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul class=&quot;feature-support&quot;&gt; &lt;li class=&quot;environment has-support has-link&quot;&gt; &lt;a href=&quot;https://chromestatus.com/feature/5765269513306112&quot;&gt; &lt;span class=&quot;icon chrome&quot;&gt;Chrome:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;91&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon firefox&quot;&gt;Firefox:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon safari&quot;&gt;Safari:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon nodejs&quot;&gt;Node.js:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment has-support has-link&quot;&gt; &lt;a href=&quot;https://github.com/babel/babel/pull/12139&quot;&gt; &lt;span class=&quot;icon babel&quot;&gt;Babel:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;&lt;div class=&quot;feature-support-info&quot;&gt;&lt;a href=&quot;https://v8.js.cn/features/support&quot;&gt;关于特性支持列表&lt;/a&gt;&lt;/div&gt;
</content></entry><entry><title>Private brand checks a.k.a. `#foo in obj`</title><link href="https://v8.js.cn/features/private-brand-checks"/><updated>2021-04-14T00:00:00Z</updated><id>https://v8.js.cn/features/private-brand-checks</id><author><name>Marja Hölttä (@marjakh)</name></author><content type="html">&lt;p&gt;The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt; operator&lt;/a&gt; can be used for testing whether the given object (or any object in its prototype chain) has the given property:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; o1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;foo&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; o1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; o2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;foo&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; o2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; o3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;o1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;foo&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; o3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The private brand checks feature extends the &lt;code&gt;in&lt;/code&gt; operator to support &lt;a href=&quot;https://v8.dev/features/class-fields#private-class-fields&quot;&gt;private class fields&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;#foo &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  #foo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token constant&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token constant&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  #foo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token constant&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false; it&#39;s not the same #foo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since private names are only available inside the class which defines them, the test must also occur inside the class, for example in a method like &lt;code&gt;static test&lt;/code&gt; above.&lt;/p&gt;
&lt;p&gt;Subclass instances receive private fields from the parent class as own-properties:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SubA&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token constant&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SubA&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But objects created with with &lt;code&gt;Object.create&lt;/code&gt; (or that have the prototype set later via the &lt;code&gt;__proto__&lt;/code&gt; setter or &lt;code&gt;Object.setPrototypeOf&lt;/code&gt;) don&#39;t receive the private fields as own-properties. Because private field lookup only works on own-properties, the &lt;code&gt;in&lt;/code&gt; operator does not find these inherited fields:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; o &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token constant&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false, private field is inherited and not owned&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token constant&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__proto__&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; o2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setPrototypeOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;o2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token constant&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;o2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false, private field is inherited and not owned&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token constant&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;o2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__proto__&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Accessing a non-existing private field throws an error - unlike for normal properties, where accessing a non-existent property returns &lt;code&gt;undefined&lt;/code&gt; but doesn&#39;t throw. Before the private brand checks, the developers have been forced to use a &lt;code&gt;try&lt;/code&gt;-&lt;code&gt;catch&lt;/code&gt; for implementing fall-back behavior for cases where an object doesn&#39;t have the needed private field:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;#foo&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// Fallback for the case obj didn&#39;t have #foo&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  #foo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the existence of the private field can be tested using a private brand check:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;#foo &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;#foo&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// Fallback for the case obj didn&#39;t have #foo&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  #foo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But beware - the existence of one private field does not guarantee that the object has all the private fields declared in a class! The following example shows a half-constructed object which has only one of the two private fields declared in its class:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; halfConstructed&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;#x &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;#y &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  #x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  #y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    halfConstructed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;error&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;halfConstructed&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;support&quot;&gt;Private brand check support &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/private-brand-checks#support&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul class=&quot;feature-support&quot;&gt; &lt;li class=&quot;environment has-support has-link&quot;&gt; &lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=11374&quot;&gt; &lt;span class=&quot;icon chrome&quot;&gt;Chrome:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;91&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon firefox&quot;&gt;Firefox:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon safari&quot;&gt;Safari:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon nodejs&quot;&gt;Node.js:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon babel&quot;&gt;Babel:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;/ul&gt;&lt;div class=&quot;feature-support-info&quot;&gt;&lt;a href=&quot;https://v8.js.cn/features/support&quot;&gt;关于特性支持列表&lt;/a&gt;&lt;/div&gt;
</content></entry><entry><title>Class static initialization blocks</title><link href="https://v8.js.cn/features/class-static-initializer-blocks"/><updated>2021-03-30T00:00:00Z</updated><id>https://v8.js.cn/features/class-static-initializer-blocks</id><author><name>Shu-yu Guo (@_shu)</name></author><content type="html">&lt;p&gt;The new class static initialization block syntax lets developers gather code that should run once for a given class definition and put them in a single place. Consider the following example where a pseudo-random number generator uses a static block to initialize an entropy pool once, when the &lt;code&gt;class MyPRNG&lt;/code&gt; definition is evaluated.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MyPRNG&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;seed &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;MyPRNG&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;entropyPool&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Entropy pool exhausted&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;      seed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; MyPRNG&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;entropyPool&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;seed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; seed&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;getRandom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; … &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; entropyPool &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;entropyPool&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;probeEntropySource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;scope&quot;&gt;Scope &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/class-static-initializer-blocks#scope&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Each static initialization block is its own &lt;code&gt;var&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt;/&lt;code&gt;const&lt;/code&gt; scope. Like in static field initializers, the &lt;code&gt;this&lt;/code&gt; value in static blocks is the class constructor itself. Similarly, &lt;code&gt;super.property&lt;/code&gt; inside a static block refers to the super class’s static property.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;outer y&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; fieldA &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;A.fieldA&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; fieldB &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;B.fieldB&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fieldA&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// → &#39;A.fieldA&#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fieldB&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// → &#39;B.fieldB&#39;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Since static blocks are their own `var` scope, `var`s do not hoist!&lt;/span&gt;&lt;br /&gt;y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;outer y&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;multiple-blocks&quot;&gt;Multiple blocks &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/class-static-initializer-blocks#multiple-blocks&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A class may have more than one static initialization block. These blocks are evaluated in textual order. Additionally, if there are any static fields, all static elements are evaluated in textual order.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; field1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;field 1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;static block 1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; field2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;field 2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;static block 2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → field 1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;//   static block 1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;//   field 2&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;//   static block 2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;access-to-private-fields&quot;&gt;Access to private fields &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/class-static-initializer-blocks#access-to-private-fields&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since a class static initialization block is always nested inside a class, it has access to that class’s private fields.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; getDPrivateField&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  #privateField&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;#privateField &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function-variable function&quot;&gt;getDPrivateField&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;#privateField&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;getDPrivateField&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;private&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → private&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s about it. Happy object orienting!&lt;/p&gt;
&lt;h2 id=&quot;support&quot;&gt;Class static initialization block support &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/class-static-initializer-blocks#support&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul class=&quot;feature-support&quot;&gt; &lt;li class=&quot;environment has-support has-link&quot;&gt; &lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=11375&quot;&gt; &lt;span class=&quot;icon chrome&quot;&gt;Chrome:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;91&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon firefox&quot;&gt;Firefox:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon safari&quot;&gt;Safari:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon nodejs&quot;&gt;Node.js:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment has-support has-link&quot;&gt; &lt;a href=&quot;https://babeljs.io/docs/en/babel-plugin-proposal-class-static-block&quot;&gt; &lt;span class=&quot;icon babel&quot;&gt;Babel:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;&lt;div class=&quot;feature-support-info&quot;&gt;&lt;a href=&quot;https://v8.js.cn/features/support&quot;&gt;关于特性支持列表&lt;/a&gt;&lt;/div&gt;
</content></entry><entry><title>WebAssembly integration with JavaScript BigInt</title><link href="https://v8.js.cn/features/wasm-bigint"/><updated>2020-11-12T00:00:00Z</updated><id>https://v8.js.cn/features/wasm-bigint</id><author><name>Alon Zakai</name></author><content type="html">&lt;p&gt;The &lt;a href=&quot;https://github.com/WebAssembly/JS-BigInt-integration&quot;&gt;JS-BigInt-Integration&lt;/a&gt; feature makes it easy to pass 64-bit integers between JavaScript and WebAssembly. This post explains what that means and why it’s useful, which includes making things simpler for developers, letting code run more quickly, and also speeding up build times.&lt;/p&gt;
&lt;h2 id=&quot;64-bit-integers&quot;&gt;64-bit integers &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/wasm-bigint#64-bit-integers&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;JavaScript Numbers are doubles, that is, 64-bit floating-point values. Such a value can contain any 32-bit integer with full precision, but not all 64-bit ones. WebAssembly, on the other hand, has full support for 64-bit integers, the &lt;code&gt;i64&lt;/code&gt; type. A problem occurs when connecting the two: If a Wasm function returns an i64, for example, then the VM throws an exception if you call it from JavaScript, something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;TypeError: Wasm function signature contains illegal type
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As the error says, &lt;code&gt;i64&lt;/code&gt; is not a legal type for JavaScript.&lt;/p&gt;
&lt;p&gt;Historically, the best solution for this was “legalization” of the Wasm. Legalization means to convert Wasm imports and exports to use valid types for JavaScript. In practice, that did two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Replace a 64-bit integer parameter with two 32-bit ones, representing the low and high bits, respectively.&lt;/li&gt;
&lt;li&gt;Replace a 64-bit integer return value with a 32-bit one representing the low bits, and use a 32-bit value on the side for the high bits.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example, consider this Wasm module:&lt;/p&gt;
&lt;pre class=&quot;language-wasm&quot;&gt;&lt;code class=&quot;language-wasm&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;module&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$send_i64&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$x&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    ..&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Legalization would turn that into this:&lt;/p&gt;
&lt;pre class=&quot;language-wasm&quot;&gt;&lt;code class=&quot;language-wasm&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;module&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$send_i64&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$x_low&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$x_high&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$x&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;;; the real value the rest of the code will use&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;;; code to combine $x_low and $x_high into $x&lt;/span&gt;&lt;br /&gt;    ..&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Legalization is done on the tools side, before it reaches the VM that runs it. For example, the &lt;a href=&quot;https://github.com/WebAssembly/binaryen&quot;&gt;Binaryen&lt;/a&gt; toolchain library has a pass called &lt;a href=&quot;https://github.com/WebAssembly/binaryen/blob/fd7e53fe0ae99bd27179cb35d537e4ce5ec1fe11/src/passes/LegalizeJSInterface.cpp&quot;&gt;LegalizeJSInterface&lt;/a&gt; that does that transformation, which is run automatically in &lt;a href=&quot;https://emscripten.org/&quot;&gt;Emscripten&lt;/a&gt; when it is needed.&lt;/p&gt;
&lt;h2 id=&quot;downsides-of-legalization&quot;&gt;Downsides of legalization &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/wasm-bigint#downsides-of-legalization&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Legalization works well enough for many things, but it does have downsides, like the extra work to combine or split up 32-bit pieces into 64-bit values. While it’s rare that that happens on a hot path, when it does the slowdown can be noticeable - we’ll see some numbers later.&lt;/p&gt;
&lt;p&gt;Another annoyance is that legalization is noticeable by users, since it changes the interface between JavaScript and Wasm. Here is an example:&lt;/p&gt;
&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// example.c&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdint.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;send_i64_to_js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;int64_t&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;send_i64_to_js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0xABCD12345678ULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// example.js&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;mergeInto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;LibraryManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;library&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;send_i64_to_js&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;JS received: 0x&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a tiny C program that calls a &lt;a href=&quot;https://emscripten.org/docs/porting/connecting_cpp_and_javascript/Interacting-with-code.html#implement-c-in-javascript&quot;&gt;JavaScript library&lt;/a&gt; function (that is, we define an extern C function in C, and implement it in JavaScript, as a simple and low-level way to call between Wasm and JavaScript). All this program does is send an &lt;code&gt;i64&lt;/code&gt; out to JavaScript, where we attempt to print it.&lt;/p&gt;
&lt;p&gt;We can build that with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;emcc example.c --js-library example.js -o out.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we run it, we don’t get what we expect:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node out.js
JS received: 0x12345678
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We sent &lt;code&gt;0xABCD12345678&lt;/code&gt; but we only received &lt;code&gt;0x12345678&lt;/code&gt; 😔. What happens here is that legalization turns that &lt;code&gt;i64&lt;/code&gt; into two &lt;code&gt;i32&lt;/code&gt;s, and our code just received the low 32 bits, and ignored another parameter that was sent. To handle things properly, we’d need to do something like this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// The i64 is split into two 32-bit parameters, “low” and “high”.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;send_i64_to_js&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;low&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; high&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;JS received: 0x&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; high&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; low&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running this now, we get&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;JS received: 0xabcd12345678
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, it’s possible to live with legalization. But it can be kind of annoying!&lt;/p&gt;
&lt;h2 id=&quot;the-solution%3A-javascript-bigints&quot;&gt;The solution: JavaScript BigInts &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/wasm-bigint#the-solution%3A-javascript-bigints&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;JavaScript has &lt;a href=&quot;https://v8.js.cn/features/bigint&quot;&gt;BigInt&lt;/a&gt; values now, which represent integers of arbitrary size, so they can represent 64-bit integers properly. It is natural to want to use those to represent &lt;code&gt;i64&lt;/code&gt;s from Wasm. That’s exactly what the JS-BigInt-Integration feature does!&lt;/p&gt;
&lt;p&gt;Emscripten has support for Wasm BigInt integration, which we can use to compile the original example (without any hacks for legalization), by just adding &lt;code&gt;-s WASM_BIGINT&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;emcc example.c --js-library example.js -o out.js -s WASM_BIGINT
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can then run it (note that we need to pass Node.js a flag to enable BigInt integration currently):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node --experimental-wasm-bigint a.out.js
JS received: 0xabcd12345678
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Perfect, exactly what we wanted!&lt;/p&gt;
&lt;p&gt;And not only is this simpler, but it’s faster. As mentioned earlier, in practice it’s rare that &lt;code&gt;i64&lt;/code&gt; conversions happen on a hot path, but when it does the slowdown can be noticeable. If we turn the above example into a benchmark, running many calls of &lt;code&gt;send_i64_to_js&lt;/code&gt;, then the BigInt version is 18% faster.&lt;/p&gt;
&lt;p&gt;Another benefit from BigInt integration is that the toolchain can avoid legalization. If Emscripten does not need to legalize then it may not have any work to do on the Wasm that LLVM emits, which speeds up build times. You can get that speedup if you build with &lt;code&gt;-s WASM_BIGINT&lt;/code&gt; and do not provide any other flags that require changes to be made. For example, &lt;code&gt;-O0 -s WASM_BIGINT&lt;/code&gt; works (but optimized builds &lt;a href=&quot;https://emscripten.org/docs/optimizing/Optimizing-Code.html#link-times&quot;&gt;run the Binaryen optimizer&lt;/a&gt; which is important for size).&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/wasm-bigint#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;WebAssembly BigInt integration has been implemented in &lt;a href=&quot;https://webassembly.org/roadmap/&quot;&gt;multiple browsers&lt;/a&gt;, including Chrome 85 (released 2020-08-25) so you can try it out today!&lt;/p&gt;
</content></entry><entry><title>`Atomics.wait`, `Atomics.notify`, `Atomics.waitAsync`</title><link href="https://v8.js.cn/features/atomics"/><updated>2020-09-24T00:00:00Z</updated><id>https://v8.js.cn/features/atomics</id><author><name>Marja Hölttä, a non-blocking blogger</name></author><content type="html">&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/wait&quot;&gt;&lt;code&gt;Atomics.wait&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/notify&quot;&gt;&lt;code&gt;Atomics.notify&lt;/code&gt;&lt;/a&gt; are low-level synchronization primitives useful for implementing mutexes and other means of synchronization. However, since &lt;code&gt;Atomics.wait&lt;/code&gt; is blocking, it’s not possible to call it on the main thread (trying to do so throws a &lt;code&gt;TypeError&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Starting from version 8.7, V8 supports a non-blocking version, &lt;a href=&quot;https://github.com/tc39/proposal-atomics-wait-async/blob/master/PROPOSAL.md&quot;&gt;&lt;code&gt;Atomics.waitAsync&lt;/code&gt;&lt;/a&gt;, which is also usable on the main thread.&lt;/p&gt;
&lt;p&gt;In this post, we explain how to use these low-level APIs to implement a mutex that works both synchronously (for worker threads) and asynchronously (for worker threads or the main thread).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Atomics.wait&lt;/code&gt; and &lt;code&gt;Atomics.waitAsync&lt;/code&gt; take the following parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;buffer&lt;/code&gt;: an &lt;code&gt;Int32Array&lt;/code&gt; or &lt;code&gt;BigInt64Array&lt;/code&gt; backed by a &lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index&lt;/code&gt;: a valid index within the array&lt;/li&gt;
&lt;li&gt;&lt;code&gt;expectedValue&lt;/code&gt;: a value we expect to be present in the memory location described by &lt;code&gt;(buffer, index)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timeout&lt;/code&gt;: a timeout in milliseconds (optional, defaults to &lt;code&gt;Infinity&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The return value of &lt;code&gt;Atomics.wait&lt;/code&gt; is a string. If the memory location doesn’t contain the expected value, &lt;code&gt;Atomics.wait&lt;/code&gt; returns immediately with the value &lt;code&gt;&#39;not-equal&#39;&lt;/code&gt;. Otherwise, the thread is blocked until another thread calls &lt;code&gt;Atomics.notify&lt;/code&gt; with the same memory location or the timeout is reached. In the former case, &lt;code&gt;Atomics.wait&lt;/code&gt; returns the value &lt;code&gt;&#39;ok&#39;&lt;/code&gt;, in the latter case, &lt;code&gt;Atomics.wait&lt;/code&gt; returns the value &lt;code&gt;&#39;timed-out&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Atomics.notify&lt;/code&gt; takes the following parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an &lt;code&gt;Int32Array&lt;/code&gt; or &lt;code&gt;BigInt64Array&lt;/code&gt; backed by a &lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;an index (valid within the array)&lt;/li&gt;
&lt;li&gt;how many waiters to notify (optional, defaults to &lt;code&gt;Infinity&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It notifies the given amount of waiters, in FIFO order, waiting on the memory location described by &lt;code&gt;(buffer, index)&lt;/code&gt;. If there are several pending &lt;code&gt;Atomics.wait&lt;/code&gt; calls or &lt;code&gt;Atomics.waitAsync&lt;/code&gt; calls related to the same location, they are all in the same FIFO queue.&lt;/p&gt;
&lt;p&gt;In contrast to &lt;code&gt;Atomics.wait&lt;/code&gt;, &lt;code&gt;Atomics.waitAsync&lt;/code&gt; always returns immediately. The return value is one of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{ async: false, value: &#39;not-equal&#39; }&lt;/code&gt; (if the memory location didn’t contain the expected value)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{ async: false, value: &#39;timed-out&#39; }&lt;/code&gt; (only for immediate timeout 0)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{ async: true, value: promise }&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The promise may later be resolved with a string value &lt;code&gt;&#39;ok&#39;&lt;/code&gt; (if &lt;code&gt;Atomics.notify&lt;/code&gt; was called with the same memory location) or &lt;code&gt;&#39;timed-out&#39;&lt;/code&gt; (if the timeout was reached). The promise is never rejected.&lt;/p&gt;
&lt;p&gt;The following example demonstrates the basic usage of &lt;code&gt;Atomics.waitAsync&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sab &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SharedArrayBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; i32a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Int32Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sab&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Atomics&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;waitAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i32a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;//                                     |  |  ^ timeout (opt)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;//                                     |  ^ expected value&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;//                                     ^ index&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;not-equal&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// The value in the SharedArrayBuffer was not the expected one.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;br /&gt;  result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;ok&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* notified */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* value is &#39;timed-out&#39; */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// In this thread, or in another thread:&lt;/span&gt;&lt;br /&gt;Atomics&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;notify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i32a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we’ll show how to implement a mutex which can be used both synchronously and asynchronously. Implementing the synchronous version of the mutex has been previously discussed, e.g. &lt;a href=&quot;https://blogtitle.github.io/using-javascript-sharedarraybuffers-and-atomics/&quot;&gt;in this blog post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the example, we don’t use the timeout parameter in &lt;code&gt;Atomics.wait&lt;/code&gt; and &lt;code&gt;Atomics.waitAsync&lt;/code&gt;. The parameter can be used for implementing condition variables with a timeout.&lt;/p&gt;
&lt;p&gt;Our mutex class, &lt;code&gt;AsyncLock&lt;/code&gt;, operates on a &lt;code&gt;SharedArrayBuffer&lt;/code&gt; and implements the following methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lock&lt;/code&gt; — blocks the thread until we&#39;re able to lock the mutex (usable only on a worker thread)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unlock&lt;/code&gt; — unlocks the mutex (counterpart of &lt;code&gt;lock&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;executeLocked(callback)&lt;/code&gt; — non-blocking lock, can be used by the main thread; schedules &lt;code&gt;callback&lt;/code&gt; to be executed once we manage to get the lock&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s see how each of those can be implemented. The class definition includes constants and a constructor which takes the &lt;code&gt;SharedArrayBuffer&lt;/code&gt; as a parameter.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AsyncLock&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;INDEX&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;UNLOCKED&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;LOCKED&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;sab&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sab &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sab&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;i32a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Int32Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sab&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;/* … */&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;/* … */&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;executeLocked&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;/* … */&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here &lt;code&gt;i32a[0]&lt;/code&gt; contains either the value &lt;code&gt;LOCKED&lt;/code&gt; or &lt;code&gt;UNLOCKED&lt;/code&gt;. It’s also the wait location for &lt;code&gt;Atomics.wait&lt;/code&gt;and &lt;code&gt;Atomics.waitAsync&lt;/code&gt;. The &lt;code&gt;AsyncLock&lt;/code&gt; class ensures the following invariants:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If &lt;code&gt;i32a[0] == LOCKED&lt;/code&gt;, and a thread starts to wait (either via &lt;code&gt;Atomics.wait&lt;/code&gt; or &lt;code&gt;Atomics.waitAsync&lt;/code&gt;) on &lt;code&gt;i32a[0]&lt;/code&gt;, it will eventually be notified.&lt;/li&gt;
&lt;li&gt;After getting notified, the thread tries to grab the lock. If it gets the lock, it will notify again when releasing it.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;sync-lock-and-unlock&quot;&gt;Sync lock and unlock &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/atomics#sync-lock-and-unlock&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Next we show the blocking &lt;code&gt;lock&lt;/code&gt; method which can only be called from a worker thread:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; oldValue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Atomics&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;compareExchange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;i32a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;INDEX&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                        &lt;span class=&quot;token comment&quot;&gt;/* old value &gt;&gt;&gt; */&lt;/span&gt;  AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;UNLOCKED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                        &lt;span class=&quot;token comment&quot;&gt;/* new value &gt;&gt;&gt; */&lt;/span&gt;  AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;LOCKED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;oldValue &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;UNLOCKED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    Atomics&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;i32a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;INDEX&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                 AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;LOCKED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &amp;lt;&amp;lt;&amp;lt; expected value at start&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When a thread calls &lt;code&gt;lock()&lt;/code&gt;, first it tries to get the lock by using &lt;code&gt;Atomics.compareExchange&lt;/code&gt; to change the lock state from &lt;code&gt;UNLOCKED&lt;/code&gt; to &lt;code&gt;LOCKED&lt;/code&gt;. &lt;code&gt;Atomics.compareExchange&lt;/code&gt; tries to do the state change atomically, and it returns the original value of the memory location. If the original value was &lt;code&gt;UNLOCKED&lt;/code&gt;, we know the state change succeeded, and the thread acquired the lock. Nothing more is needed.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;Atomics.compareExchange&lt;/code&gt; doesn’t manage to change the lock state, another thread must be holding the lock. Thus, this thread tries &lt;code&gt;Atomics.wait&lt;/code&gt; in order to wait for the other thread to release the lock. If the memory location still holds the expected value (in this case, &lt;code&gt;AsyncLock.LOCKED&lt;/code&gt;), calling &lt;code&gt;Atomics.wait&lt;/code&gt; will block the thread and the &lt;code&gt;Atomics.wait&lt;/code&gt; call will return only when another thread calls &lt;code&gt;Atomics.notify&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;unlock&lt;/code&gt; is method sets the lock to the &lt;code&gt;UNLOCKED&lt;/code&gt; state and calls &lt;code&gt;Atomics.notify&lt;/code&gt; to wake up one waiter which was waiting for the lock. The state change is always expected to succeed, since this thread is holding the lock, and nobody else should call &lt;code&gt;unlock()&lt;/code&gt; meanwhile.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; oldValue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Atomics&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;compareExchange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;i32a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;INDEX&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                      &lt;span class=&quot;token comment&quot;&gt;/* old value &gt;&gt;&gt; */&lt;/span&gt;  AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;LOCKED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                      &lt;span class=&quot;token comment&quot;&gt;/* new value &gt;&gt;&gt; */&lt;/span&gt;  AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;UNLOCKED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;oldValue &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;LOCKED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Tried to unlock while not holding the mutex&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  Atomics&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;notify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;i32a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;INDEX&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The straightforward case goes as follows: the lock is free and thread T1 acquires it by changing the lock state with &lt;code&gt;Atomics.compareExchange&lt;/code&gt;. Thread T2 tries to acquire the lock by calling &lt;code&gt;Atomics.compareExchange&lt;/code&gt;, but it doesn’t succeed in changing the lock state. T2 then calls &lt;code&gt;Atomics.wait&lt;/code&gt;, which blocks the thread. At some point T1 releases the lock and calls &lt;code&gt;Atomics.notify&lt;/code&gt;. That makes the &lt;code&gt;Atomics.wait&lt;/code&gt; call in T2 return &lt;code&gt;&#39;ok&#39;&lt;/code&gt;, waking up T2. T2 then tries to acquire the lock again, and this time succeeds.&lt;/p&gt;
&lt;p&gt;There are also 2 possible corner cases — these demonstrate the reason for &lt;code&gt;Atomics.wait&lt;/code&gt; and &lt;code&gt;Atomics.waitAsync&lt;/code&gt; checking for a specific value at the index:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;T1 is holding the lock and T2 tries to get it. First, T2 tries to change the lock state with &lt;code&gt;Atomics.compareExchange&lt;/code&gt;, but doesn’t succeed. But then T1 releases the lock before T2 manages to call &lt;code&gt;Atomics.wait&lt;/code&gt;. When T2 calls &lt;code&gt;Atomics.wait&lt;/code&gt;, it returns immediately with the value &lt;code&gt;&#39;not-equal&#39;&lt;/code&gt;. In that case, T2 continues with the next loop iteration, trying to acquire the lock again.&lt;/li&gt;
&lt;li&gt;T1 is holding the lock and T2 is waiting for it with &lt;code&gt;Atomics.wait&lt;/code&gt;. T1 releases the lock — T2 wakes up (the &lt;code&gt;Atomics.wait&lt;/code&gt; call returns) and tries to do &lt;code&gt;Atomics.compareExchange&lt;/code&gt; to acquire the lock, but another thread T3 was faster and got the lock already. So the call to &lt;code&gt;Atomics.compareExchange&lt;/code&gt; fails to get the lock, and T2 calls &lt;code&gt;Atomics.wait&lt;/code&gt; again, blocking until T3 releases the lock.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because of the latter corner case, the mutex isn’t “fair”. It’s possible that T2 has been waiting for the lock to be released, but T3 comes and gets it immediately. A more realistic lock implementation may use several states to differentiate between “locked” and “locked with contention”.&lt;/p&gt;
&lt;h2 id=&quot;async-lock&quot;&gt;Async lock &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/atomics#async-lock&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The non-blocking &lt;code&gt;executeLocked&lt;/code&gt; method is callable from the main thread, unlike the blocking &lt;code&gt;lock&lt;/code&gt; method. It gets a callback function as its only parameter and schedules the callback to be executed once it has successfully acquired the lock.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;executeLocked&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; self &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;tryGetLock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; oldValue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Atomics&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;compareExchange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;i32a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;INDEX&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                          &lt;span class=&quot;token comment&quot;&gt;/* old value &gt;&gt;&gt; */&lt;/span&gt;  AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;UNLOCKED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                          &lt;span class=&quot;token comment&quot;&gt;/* new value &gt;&gt;&gt; */&lt;/span&gt;  AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;LOCKED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;oldValue &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;UNLOCKED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Atomics&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;waitAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;i32a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;INDEX&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                                       AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;LOCKED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;                                   &lt;span class=&quot;token comment&quot;&gt;//  ^ expected value at start&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;tryGetLock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The inner function &lt;code&gt;tryGetLock&lt;/code&gt; tries to first get the lock with &lt;code&gt;Atomics.compareExchange&lt;/code&gt;, as before. If that successfully changes the lock state, it can execute the callback, unlock the lock, and return.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;Atomics.compareExchange&lt;/code&gt; fails to get the lock, we need to try again when the lock is probably free. We can’t block and wait for the lock to become free — instead, we schedule the new try using &lt;code&gt;Atomics.waitAsync&lt;/code&gt; and the Promise it returns.&lt;/p&gt;
&lt;p&gt;If we successfully started &lt;code&gt;Atomics.waitAsync&lt;/code&gt;, the returned Promise resolves when the lock-holding thread does &lt;code&gt;Atomics.notify&lt;/code&gt;. Then the thread that was waiting for the lock tries to get the lock again, like before.&lt;/p&gt;
&lt;p&gt;The same corner cases (the lock getting released between the &lt;code&gt;Atomics.compareExchange&lt;/code&gt; call and the &lt;code&gt;Atomics.waitAsync&lt;/code&gt; call, as well as the lock getting acquired again between the Promise resolving and the &lt;code&gt;Atomics.compareExchange&lt;/code&gt; call) are possible in the asynchronous version too, so the code has to handle them in a robust way.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/atomics#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this post, we showed how to use the synchronization primitives &lt;code&gt;Atomics.wait&lt;/code&gt;, &lt;code&gt;Atomics.waitAsync&lt;/code&gt;, and &lt;code&gt;Atomics.notify&lt;/code&gt;, to implement a mutex which is usable both in the main thread an in worker threads.&lt;/p&gt;
&lt;h2 id=&quot;support&quot;&gt;Feature support &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/atomics#support&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;atomics.wait-and-atomics.notify&quot;&gt;&lt;code&gt;Atomics.wait&lt;/code&gt; and &lt;code&gt;Atomics.notify&lt;/code&gt; &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/atomics#atomics.wait-and-atomics.notify&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul class=&quot;feature-support&quot;&gt; &lt;li class=&quot;environment has-support&quot;&gt; &lt;span class=&quot;icon chrome&quot;&gt;Chrome:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;68&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment has-support&quot;&gt; &lt;span class=&quot;icon firefox&quot;&gt;Firefox:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;78&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon safari&quot;&gt;Safari:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment has-support&quot;&gt; &lt;span class=&quot;icon nodejs&quot;&gt;Node.js:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;8.10.0&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon babel&quot;&gt;Babel:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;/ul&gt;&lt;div class=&quot;feature-support-info&quot;&gt;&lt;a href=&quot;https://v8.js.cn/features/support&quot;&gt;关于特性支持列表&lt;/a&gt;&lt;/div&gt;
&lt;h3 id=&quot;atomics.waitasync&quot;&gt;&lt;code&gt;Atomics.waitAsync&lt;/code&gt; &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/atomics#atomics.waitasync&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul class=&quot;feature-support&quot;&gt; &lt;li class=&quot;environment has-support&quot;&gt; &lt;span class=&quot;icon chrome&quot;&gt;Chrome:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;87&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon firefox&quot;&gt;Firefox:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon safari&quot;&gt;Safari:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment has-support&quot;&gt; &lt;span class=&quot;icon nodejs&quot;&gt;Node.js:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;16&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon babel&quot;&gt;Babel:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;/ul&gt;&lt;div class=&quot;feature-support-info&quot;&gt;&lt;a href=&quot;https://v8.js.cn/features/support&quot;&gt;关于特性支持列表&lt;/a&gt;&lt;/div&gt;
</content></entry><entry><title>Logical assignment</title><link href="https://v8.js.cn/features/logical-assignment"/><updated>2020-05-07T00:00:00Z</updated><id>https://v8.js.cn/features/logical-assignment</id><author><name>Shu-yu Guo (@_shu)</name></author><content type="html">&lt;p&gt;JavaScript supports a range of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators&quot;&gt;compound assignment operators&lt;/a&gt; that let programmers succinctly express a binary operation together with assignment. Currently, only mathematical or bitwise operations are supported.&lt;/p&gt;
&lt;p&gt;What has been missing is the ability to combine logical operations with assignment. Until now! JavaScript now supports logical assignment with the new operators &lt;code&gt;&amp;amp;&amp;amp;=&lt;/code&gt;, &lt;code&gt;||=&lt;/code&gt;, and &lt;code&gt;??=&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;logical-assignment-operators&quot;&gt;Logical assignment operators &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/logical-assignment#logical-assignment-operators&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we dive into the new operators, let’s have a refresher on the existing compound assignment operators. For instance, the meaning of &lt;code&gt;lhs += rhs&lt;/code&gt; is roughly equivalent to &lt;code&gt;lhs = lhs + rhs&lt;/code&gt;. This rough equivalence holds for all the existing operators &lt;code&gt;@=&lt;/code&gt; where &lt;code&gt;@&lt;/code&gt; stands in for a binary operator like &lt;code&gt;+&lt;/code&gt;, or &lt;code&gt;|&lt;/code&gt;. It is worth noting this is, strictly speaking, only correct when &lt;code&gt;lhs&lt;/code&gt; is a variable. For more complex left-hand sides in expressions like &lt;code&gt;obj[computedPropertyName()] += rhs&lt;/code&gt;, the left-hand side is only evaluated once.&lt;/p&gt;
&lt;p&gt;Let’s now dive into the new operators. In contrast with the existing operators, &lt;code&gt;lhs @= rhs&lt;/code&gt; does not roughly mean &lt;code&gt;lhs = lhs @ rhs&lt;/code&gt; when &lt;code&gt;@&lt;/code&gt; is a logical operation: &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;, or &lt;code&gt;??&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// As an additional review, here is the semantics of logical and:&lt;/span&gt;&lt;br /&gt;x &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → y when x is truthy&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → x when x is not truthy&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// First, logical and assignment. The two lines following this&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// comment block are equivalent.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Note that like existing compound assignment operators, more complex&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// left-hand sides are only evaluated once.&lt;/span&gt;&lt;br /&gt;x &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;=&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;x &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// The semantics of logical or:&lt;/span&gt;&lt;br /&gt;x &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; y&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → x when x is truthy&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → y when x is not truthy&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Similarly, logical or assignment:&lt;/span&gt;&lt;br /&gt;x &lt;span class=&quot;token operator&quot;&gt;||=&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;x &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// The semantics of nullish coalescing operator:&lt;/span&gt;&lt;br /&gt;x &lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt; y&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → y when x is nullish (null or undefined)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → x when x is not nullish&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Finally, nullish coalescing assignment:&lt;/span&gt;&lt;br /&gt;x &lt;span class=&quot;token operator&quot;&gt;??=&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;x &lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;short-circuit-semantics&quot;&gt;Short-circuit semantics &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/logical-assignment#short-circuit-semantics&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Unlike their mathematical and bitwise counterparts, logical assignments follow the short-circuiting behavior of their respective logical operations. They &lt;em&gt;only&lt;/em&gt; perform an assignment if the logical operation would evaluate the right-hand side.&lt;/p&gt;
&lt;p&gt;At first this may seem confusing. Why not unconditionally assign to the left-hand side like in other compound assignments?&lt;/p&gt;
&lt;p&gt;There is a good practical reason for the difference. When combining logical operations with assignment, the assignment may cause a side-effect that should happen conditionally based on the result of that logical operation. Causing the side-effect unconditionally can negatively affect the performance or even correctness of the program.&lt;/p&gt;
&lt;p&gt;Let’s make this concrete with an example of two versions of a function that sets a default message in an element.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Display a default message if it doesn’t override anything.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Only assigns to innerHTML if it’s empty. Doesn’t cause inner&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// elements of msgElement to lose focus.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setDefaultMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  msgElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&amp;lt;p&gt;No messages&amp;lt;p&gt;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Display a default message if it doesn’t override anything.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Buggy! May cause inner elements of msgElement to&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// lose focus every time it’s called.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setDefaultMessageBuggy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  msgElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; msgElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&amp;lt;p&gt;No messages&amp;lt;p&gt;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;note&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Because the &lt;code&gt;innerHTML&lt;/code&gt; property is &lt;a href=&quot;https://w3c.github.io/DOM-Parsing/#dom-innerhtml-innerhtml&quot;&gt;specified&lt;/a&gt; to return the empty string instead of &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;||=&lt;/code&gt; must be used instead of &lt;code&gt;??=&lt;/code&gt;. When writing code, keep in mind that many web APIs do not use &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; to mean empty or absent.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In HTML, assigning to the &lt;code&gt;.innerHTML&lt;/code&gt; property on an element is destructive. Inner children are deleted, and new children parsed from the newly assigned string are inserted. Even when the new string is the same as the old string, it causes both additional work and the inner elements to lose focus. For this practical reason of not causing unwanted side-effects, the semantics of logical assignment operators short-circuit the assignment.&lt;/p&gt;
&lt;p&gt;It may help to think about the symmetry with other compound assignment operators in the following way. Mathematical and bitwise operators are unconditional, and so the assignment is also unconditional. Logical operators are conditional, and so the assignment is also conditional.&lt;/p&gt;
&lt;h2 id=&quot;support&quot;&gt;Logical assignment support &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/logical-assignment#support&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul class=&quot;feature-support&quot;&gt; &lt;li class=&quot;environment has-support&quot;&gt; &lt;span class=&quot;icon chrome&quot;&gt;Chrome:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;85&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment has-support has-link&quot;&gt; &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1629106&quot;&gt; &lt;span class=&quot;icon firefox&quot;&gt;Firefox:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;79&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;environment has-support has-link&quot;&gt; &lt;a href=&quot;https://developer.apple.com/documentation/safari-release-notes/safari-14-beta-release-notes#New-Features:~:text=Added%2520logical%2520assignment%2520operator%2520support.&quot;&gt; &lt;span class=&quot;icon safari&quot;&gt;Safari:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;14&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;environment has-support&quot;&gt; &lt;span class=&quot;icon nodejs&quot;&gt;Node.js:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;16&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment has-support has-link&quot;&gt; &lt;a href=&quot;https://babeljs.io/docs/en/babel-plugin-proposal-logical-assignment-operators&quot;&gt; &lt;span class=&quot;icon babel&quot;&gt;Babel:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;&lt;div class=&quot;feature-support-info&quot;&gt;&lt;a href=&quot;https://v8.js.cn/features/support&quot;&gt;关于特性支持列表&lt;/a&gt;&lt;/div&gt;
</content></entry></feed>